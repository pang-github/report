package com.sweet.core.mybatis;import java.io.File;import java.util.ArrayList;import java.util.List;import java.util.Scanner;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.builder.ConfigBuilder;import com.baomidou.mybatisplus.generator.config.converts.MySqlTypeConvert;import com.baomidou.mybatisplus.generator.config.rules.FileType;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import com.baomidou.mybatisplus.generator.engine.BeetlTemplateEngine;public class CodeGenerator {    /**     * <p>     * 读取控制台内容     * </p>     */    public static String scanner(String tip) {        Scanner scanner = new Scanner(System.in);        StringBuilder help = new StringBuilder();        help.append("请输入" + tip + "：");        System.out.println(help.toString());        if (scanner.hasNext()) {            String ipt = scanner.next();            if (StringUtils.isNotEmpty(ipt)) {                return ipt;            }        }        throw new MybatisPlusException("请输入正确的" + tip + "！");    }    public static void main(String[] args) {        // 代码生成器        AutoGenerator mpg = new AutoGenerator();        // 全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        gc.setOutputDir(projectPath + "/src/main/java");        gc.setAuthor("wxl");        gc.setOpen(false);        gc.setSwagger2(true); //实体属性 Swagger2 注解        gc.setBaseColumnList(true);        gc.setBaseResultMap(true);        gc.setServiceName("%sService");        gc.setFileOverride(true);        gc.setActiveRecord(true);        mpg.setGlobalConfig(gc);        // 数据源配置        DataSourceConfig dsc = new DataSourceConfig();        dsc.setDbType(DbType.MYSQL);        dsc.setTypeConvert(new MySqlTypeConvert() {        });        dsc.setUrl("jdbc:mysql://localhost:3306/sweet?autoReconnect=true&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=CONVERT_TO_NULL&useSSL=false&serverTimezone=CTT");        // dsc.setSchemaName("public");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("admin");        mpg.setDataSource(dsc);        // 包配置        PackageConfig pc = new PackageConfig();        pc.setModuleName(scanner("模块名"));        pc.setParent("com.sweet.modular");        mpg.setPackageInfo(pc);        // 自定义配置        InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {                // to do nothing            }        };        // 如果模板引擎是 freemarker//        String templatePath = "/pages/mapper.xml.ftl";        // 如果模板引擎是 velocity        // String templatePath = "/pages/mapper.xml.vm";        // 如果模板引擎是 beetl        String templatePath = "/templates/mapper.xml.btl";        // 自定义输出配置        List<FileOutConfig> focList = new ArrayList<>();        // 自定义配置会被优先输出/*        focList.add(new FileOutConfig(templatePath) {            @Override            public String outputFile(TableInfo tableInfo) {                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！                return projectPath + "/src/main/resources/mapper/" + pc.getModuleName()                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;            }        });*/        cfg.setFileCreate(new IFileCreate() {            @Override            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {                // 判断自定义文件夹是否需要创建,这里调用默认的方法                checkDir(filePath);                //对于已存在的文件，只需重复生成 entity 和 mapper.xml                File file = new File(filePath);                boolean exist = file.exists();                if(exist){                    if (filePath.endsWith("Mapper.xml")||FileType.ENTITY==fileType){                        return true;                    }else {                        return false;                    }                }                //不存在的文件都需要创建                return  true;            }        });        /*        cfg.setFileCreate(new IFileCreate() {            @Override            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {                // 判断自定义文件夹是否需要创建                checkDir("调用默认方法创建的目录");                return false;            }        });        */        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        // 配置模板        TemplateConfig templateConfig = new TemplateConfig();//        templateConfig.setEntity("/templates/entity.java");//        templateConfig.setController("/templates/controller.java");//        templateConfig.setMapper("/templates/mapper.java");//        templateConfig.setXml("/templates/mapper.xml");//        templateConfig.setService("/templates/service.java");//        templateConfig.setServiceImpl("/templates/serviceImpl.java");        // 配置自定义输出模板        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别        mpg.setTemplate(templateConfig);        // 策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);//        strategy.setSuperEntityClass("com.sweet.modular.common.BaseEntity");        strategy.setEntityLombokModel(true);        strategy.setRestControllerStyle(false);//        strategy.setSuperControllerClass("com.sweet.modular.common.BaseController");        strategy.setInclude(scanner("表名，多个英文逗号分割").split(","));        strategy.setSuperEntityColumns("id");        strategy.setControllerMappingHyphenStyle(true);        strategy.setTablePrefix("t_");        mpg.setStrategy(strategy);        mpg.setTemplateEngine(new BeetlTemplateEngine());        mpg.execute();    }}