package com.sweet.core.translationDict;import com.sweet.core.model.ResultBean;import com.sweet.core.model.system.LayuiPageInfo;import com.sweet.core.util.PropertyUtil;import com.sweet.core.util.RedisUtil;import com.sweet.core.util.StringUtil;import com.sweet.system.entity.Dict;import com.sweet.system.service.DictService;import lombok.extern.slf4j.Slf4j;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.*;import static com.alibaba.fastjson.JSON.toJSONString;/** * 说明：数据字典切面类 * Created by luojie on 2019/05/29. */@Aspect@Component@Slf4jpublic class TranslationDictAspect  {    @Autowired    RedisUtil redisUtil;    @Autowired    DictService dictService;    @Around("@annotation(translationDict)")    public Object Translation(final ProceedingJoinPoint pjp, TranslationDict translationDict) throws Throwable {        log.debug("开始进行字典转换---------");        Object result = pjp.proceed();        Object obj  = null;        boolean isList = true;        if(result == null){            return result;        //当返回的类为LayuiPageInfo        }else if(result instanceof LayuiPageInfo){            obj = ((LayuiPageInfo) result).getData();            if(((LayuiPageInfo) result).getData().size()==0){                return result;            }        //如果为ResultBean        }else if(result instanceof ResultBean){            if(!(result instanceof List) || !(result instanceof ArrayList)) {                isList = false;            }            obj = ((ResultBean)result).getData();        }        List<Object> list = null;        //需要转换的字典        DictParam[] dictParams = translationDict.value();        Map<String,List<Dict>> dictMap = new HashMap<>();        //初始化需要的字典map        Arrays.stream(dictParams).forEach(dictParam -> {            dictMap.put(dictParam.dictType(),dictService.findByTypeId(dictParam.dictType()));        });        if(isList){            list = (List<Object>) obj;            list.stream().forEach(data -> {                translation(data,dictParams,dictMap);            });        }else{            translation(obj,dictParams,dictMap);        }        return result;    }    public Object translation(Object obj,DictParam[] dictParams,Map<String,List<Dict>> dictMap){        //根据map循环字典        Arrays.stream(dictParams).forEach(dictParam -> {            //数据字典的id            String dictId = String.valueOf(PropertyUtil.getProperty(obj,dictParam.dictValueFiled()));            //数据字典的id不为空进行转换            if(!StringUtil.isEmpty(dictId)){                //获得指定类型的字典                List<Dict> dictList = dictMap.get(dictParam.dictType());                dictList.stream().forEach(dict -> {                    //循环字典 当字典id等于数据字典的id                    if(dict.getDictId().equals(dictId)){                        PropertyUtil.setProperty(obj,dictParam.dictValueFiled()+"Name",dict.getName());                    }                });            }        });        return obj;    }}