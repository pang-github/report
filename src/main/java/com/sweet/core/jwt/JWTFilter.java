package com.sweet.core.jwt;import cn.hutool.core.date.DateUtil;import com.sweet.core.exception.enums.BizExceptionEnum;import com.sweet.core.model.ResultError;import com.sweet.core.util.HttpContext;import com.sweet.core.util.SpringContextUtil;import com.sweet.core.util.StringUtil;import com.sweet.modular.patient.entity.Patient;import com.sweet.modular.patient.service.PatientService;import com.sweet.system.entity.User;import io.jsonwebtoken.JwtException;import org.apache.shiro.authz.UnauthorizedException;import org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter;import org.apache.shiro.web.util.WebUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Component;import org.springframework.web.bind.annotation.RequestMethod;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.util.Date;import static com.sweet.core.exception.enums.BizExceptionEnum.*;/** * weixin拦截器 */@Componentpublic class JWTFilter extends BasicHttpAuthenticationFilter {    private Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    PatientService patientService;    public boolean ajaxNoPermission(HttpServletRequest httpServletRequest){        String URL = String.valueOf(httpServletRequest.getRequestURL());        java.net.URL url = null;        try {            url = new URL(URL);        } catch (MalformedURLException e) {            e.printStackTrace();        }        if(JwtConstants.NONE_PERMISSION_RES.contains(url.getPath()) ){            return true;        }else{            return false;        }    }    public boolean noPermissionUrl(HttpServletRequest httpServletRequest){        String URL = String.valueOf(httpServletRequest.getRequestURL());        java.net.URL url = null;        try {            url = new URL(URL);        } catch (MalformedURLException e) {            e.printStackTrace();        }        if(JwtConstants.NONE_PERMISSION_RES.contains(url.getPath()) ){            return true;        }else{            return false;        }    }    /**     * 如果带有 token，则对 token 进行检查，否则直接通过     */    @Override    protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {        HttpServletRequest httpServletRequest =  WebUtils.toHttp(request);        //页面请求直接通过        if(HttpContext.isAjax(httpServletRequest)){            if(ajaxNoPermission(httpServletRequest)){                return true;            }else if (isLoginAttempt(request, response)) {                    //如果存在，则进入 executeLogin 方法执行登入，检查 token 是否正确                    try {                        boolean isLogin = executeLogin(request, response);                        if(!isLogin){                            renderErrorJson(request,response,TOKEN_ERROR);                            return false;                        }                        return isLogin;                    } catch (Exception e) {                        return false;                    }                }else{ return false; }        }        return true;    }    /**     * 判断用户是否想要登入。     * 检测 header 里面是否包含 Token 字段     */    @Override    protected boolean isLoginAttempt(ServletRequest request, ServletResponse response) {        HttpServletRequest req = (HttpServletRequest) request;        String token = req.getHeader("token");        return token != null;    }    /**     *输出错误信息     */    public void renderErrorJson(ServletRequest request, ServletResponse response, BizExceptionEnum exceptionEnum) {        HttpServletResponse httpServletResponse = WebUtils.toHttp(response);        HttpContext.write(httpServletResponse,new ResultError(exceptionEnum.getCode(),exceptionEnum.getMessage()));    }    /**     * 执行登陆操作     */    @Override    protected boolean executeLogin(ServletRequest request, ServletResponse response) throws Exception {        HttpServletRequest httpServletRequest =  WebUtils.toHttp(request);        HttpServletResponse httpServletResponse = WebUtils.toHttp(response);        String token = httpServletRequest.getHeader("Token");        if(StringUtil.isEmpty(token)){            renderErrorJson(request,response,TOKEN_ERROR);            return false;        }        try {            boolean flag = JwtTokenUtil.isTokenExpired(token);            if(flag){                renderErrorJson(request,response,TOKEN_EXPIRED);                return false;            }        } catch (JwtException e) {            renderErrorJson(request,response,TOKEN_ERROR);            return false;        }        try {            String userId = JwtTokenUtil.getUsernameFromToken(token);            request.setAttribute("token",token);            request.setAttribute("userId",userId);            if(patientService==null){                patientService = SpringContextUtil.getApplicationContext().getBean(PatientService.class);            }            Patient patient = patientService.getPatientByUserId(userId);            request.setAttribute("patient",patient);            Date date = JwtTokenUtil.getIssuedAtDateFromToken(token);            Date expireDate = JwtTokenUtil.getExpirationDateFromToken(token);            logger.info("发布时间 =>"+ DateUtil.formatDate(date));            logger.info("过期时间 =>"+DateUtil.formatDate(expireDate));        } catch (JwtException e) {            renderErrorJson(request,response,TOKEN_ERROR);            return false;        }        return true;    }    /**     * 对跨域提供支持     */    @Override    protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception {        HttpServletRequest httpServletRequest = (HttpServletRequest) request;        HttpServletResponse httpServletResponse = (HttpServletResponse) response;        httpServletResponse.setHeader("Access-control-Allow-Origin", httpServletRequest.getHeader("Origin"));        httpServletResponse.setHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS,PUT,DELETE");        httpServletResponse.setHeader("Access-Control-Allow-Headers", httpServletRequest.getHeader("Access-Control-Request-Headers"));        // 跨域时会首先发送一个option请求，这里我们给option请求直接返回正常状态        if (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) {            httpServletResponse.setStatus(HttpStatus.OK.value());            return false;        }        return super.preHandle(request, response);    }}