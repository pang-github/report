package com.sweet.core.shiro;import com.sweet.core.swagger.SweetProperties;import com.sweet.core.sweetConst;import com.sweet.core.util.StringUtil;import com.sweet.system.entity.Menu;import com.sweet.system.entity.Role;import com.sweet.system.mapper.MenuMapper;import com.sweet.system.mapper.RoleMapper;import com.sweet.system.entity.User;import com.sweet.system.mapper.UserMapper;import com.sweet.system.service.UserService;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;import java.util.Set;import java.util.stream.Collectors;@Slf4jpublic class ShiroRealm extends AuthorizingRealm {     @Autowired     private UserMapper userMapper;     @Autowired     private RoleMapper roleMapper;     @Autowired     private MenuMapper menuMapper;     @Autowired     private UserService userService;    /**     * 获取用户角色和权限     */    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal) {        User user = (User) SecurityUtils.getSubject().getPrincipal();        String userName = user.getUserName();        log.info("用户" + userName + "获取权限=>");        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();        // 获取用户角色集        List<Role> roleList = roleMapper.findRoleByUserName(userName);        Set<String> roleSet = roleList.stream().map(Role::getName).collect(Collectors.toSet());        //全部使用url拦截器进行权限拦截，这一步只是为了使shiro加载权限        roleSet.add("admin-user");        simpleAuthorizationInfo.setRoles(roleSet);        log.info("用户" + userName + "的角色集=>"+simpleAuthorizationInfo.getRoles());        // 获取用户权限集        List<Menu> permissionList = menuMapper.findMenuByUserName(userName);        Set<String> permissionSet = permissionList.stream().map(Menu::getUrl).collect(Collectors.toSet());        simpleAuthorizationInfo.setStringPermissions(permissionSet);        log.info("用户" + userName + "的菜单集-----"+simpleAuthorizationInfo.getStringPermissions());        log.info("getStringPermissions"+simpleAuthorizationInfo.getStringPermissions());        return simpleAuthorizationInfo;    }    /**     * 登录认证     */    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {        // 获取用户输入的用户名和密码        String userName = (String) token.getPrincipal();        String password = new String((char[]) token.getCredentials());        // 通过用户名到数据库查询用户信息        User user = userMapper.findByUserName(userName);        if (user == null) {            throw new UnknownAccountException("用户名或密码错误！");        }        if (!password.equals(user.getPassword())) {            throw new IncorrectCredentialsException("用户名或密码错误！");        }        if (user.getAccountStatus()==0) {            throw new LockedAccountException("账号已被锁定,请联系管理员！");        }        SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(user, password, getName());        if(StringUtil.isEmpty(user.getAvatar())){ user.setAvatarPath(sweetConst.DEFALT_AVATAR); }        ShiroKit.setSessionAttr("shiroUser",user);        return info;    }}