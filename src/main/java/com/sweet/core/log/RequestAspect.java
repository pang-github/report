package com.sweet.core.log;import com.sweet.core.util.HttpContextUtils;import com.sweet.core.util.IPUtils;import lombok.extern.slf4j.Slf4j;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.*;import org.aspectj.lang.reflect.MethodSignature;import org.springframework.core.LocalVariableTableParameterNameDiscoverer;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.servlet.http.HttpServletRequest;import java.lang.reflect.Method;import java.util.Arrays;import java.util.Date;@Aspect@Component@Slf4jpublic class RequestAspect {    @Pointcut("execution(public * com.sweet.modular..*Controller.*(..))")    public void pointcut() { }    /**     * 方法执行前     */    @Before(value = "pointcut()")    public void before(JoinPoint joinPoint){        log.debug("begin => RequestAspect class_method => : " + joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName());        // 接收到请求，记录请求内容        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        assert attributes != null;        HttpServletRequest request = attributes.getRequest();        // 记录下请求内容//        log.debug("URL : " + request.getRequestURL().toString());        MethodSignature signature = (MethodSignature) joinPoint.getSignature();        Method method = signature.getMethod();        // 请求的方法参数值        Object[] args = joinPoint.getArgs();        // 请求的方法参数名称        LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();        String[] paramNames = u.getParameterNames(method);        String params = "";        if (args != null && paramNames != null) {            for (int i = 0; i < args.length; i++) {                params += "  " + paramNames[i] + ": " + args[i];            }        }        log.debug("http_method => : " + request.getMethod()+"  ip : " + request.getRemoteAddr()+"  url : " + request.getRequestURL().toString()+" args => : " + params);    }    /**     * 方法执行结束，增强处理     */    @AfterReturning(returning = "ret", pointcut = "pointcut()")    public void doAfterReturning(Object ret){        // 处理完请求，返回内容        log.info("return => : " + ret);    }}