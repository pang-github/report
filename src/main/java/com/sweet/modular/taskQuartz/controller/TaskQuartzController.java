package com.sweet.modular.taskQuartz.controller;import com.alibaba.fastjson.JSON;import com.sun.org.apache.regexp.internal.RE;import com.sweet.core.task.JobStatus;import com.sweet.core.translationDict.DictParam;import com.sweet.core.translationDict.TranslationDict;import org.quartz.*;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import com.sweet.core.model.ResultBean;import com.sweet.core.model.system.LayuiPageInfo;import com.sweet.modular.taskQuartz.entity.TaskQuartz;import com.sweet.modular.taskQuartz.service.TaskQuartzService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import com.sweet.core.util.StringUtil;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.stereotype.Controller;import java.time.LocalDateTime;/** * <p> *  前端控制器 * </p> * * @author admin * @since 2020-03-10 */@Controller@RequestMapping("/admin/taskQuartz")public class TaskQuartzController {    @Autowired    private Scheduler scheduler;    @Autowired    TaskQuartzService taskQuartzService;    /**     * 列表页     */    @RequestMapping("/taskQuartz_list")    public String list(){        return "/modular/taskQuartz/taskQuartz_list";    }    /**     * 编辑页     */    @RequestMapping("/taskQuartz_edit")    public String edit(){        return "/modular/taskQuartz/taskQuartz_edit";    }    /**     * 添加/编辑     */    @RequestMapping("/editTaskQuartz")    @ResponseBody    public ResultBean editTaskQuartz(TaskQuartz taskQuartz) throws SchedulerException {        String id = taskQuartz.getId();        if(StringUtil.isNotEmpty(id)){            //如果是修改  展示旧的 任务            TriggerKey triggerKey = TriggerKey.triggerKey(taskQuartz.getJobName(), taskQuartz.getJobGroup());            // 停止触发器            scheduler.pauseTrigger(triggerKey);            // 移除触发器            scheduler.unscheduleJob(triggerKey);            JobKey key = new JobKey(taskQuartz.getJobName(),taskQuartz.getJobGroup());            scheduler.deleteJob(key);            System.out.println("移除任务:"+ JSON.toJSONString(key));        }        taskQuartz.setJobStatus(JobStatus.STOP.getStatus());        taskQuartzService.saveOrUpdate(taskQuartz);        return ResultBean.success(taskQuartz);    }    /**     * 添加修改菜单     * @param menu     * @return     */    @RequestMapping("/getTaskQuartzDetail")    @ResponseBody    public ResultBean getTaskQuartzDetail(String id){        TaskQuartz taskQuartz = taskQuartzService.getById(id);        return ResultBean.success(taskQuartz);    }    /**     * 列表数据     */    @RequestMapping("/getTaskQuartzList")    @ResponseBody    @TranslationDict({    })    public LayuiPageInfo getTaskQuartzList(TaskQuartz TaskQuartz){        LayuiPageInfo pageInfo = taskQuartzService.findPageBySpec(TaskQuartz);        return pageInfo;    }    @RequestMapping("/cron")    public String cron(){        return "/modular/taskQuartz/cron";    }    @RequestMapping("/start")    @ResponseBody    public ResultBean start(String id) throws Exception {        TaskQuartz quartz = taskQuartzService.getById(id);        if(quartz.getJobStatus().equals(JobStatus.RUN.getStatus())){            return ResultBean.error("该任务正在运行，请勿重复操作。");        }else if(quartz.getJobStatus().equals(JobStatus.PAUSED.getStatus())){            return ResultBean.error("该任务已暂停，只能继续运行。");        }        addJob(quartz);        quartz.setJobStatus(JobStatus.RUN.getStatus());        taskQuartzService.updateById(quartz);        return ResultBean.success();    }    @RequestMapping("/remove")    @ResponseBody    public ResultBean remove(String id) {        try {            TaskQuartz quartz = taskQuartzService.getById(id);            if(quartz == null){                return ResultBean.error("操作异常");            }            TriggerKey triggerKey = TriggerKey.triggerKey(quartz.getJobName(), quartz.getJobGroup());            // 停止触发器            scheduler.pauseTrigger(triggerKey);            // 移除触发器            scheduler.unscheduleJob(triggerKey);            // 删除任务            scheduler.deleteJob(JobKey.jobKey(quartz.getJobName(), quartz.getJobGroup()));            System.out.println("removeJob:"+JobKey.jobKey(quartz.getJobName()));            taskQuartzService.removeById(id);        } catch (Exception e) {            e.printStackTrace();            return ResultBean.error("操作异常");        }        return ResultBean.success();    }    @RequestMapping("/pause")    @ResponseBody    public ResultBean pause(String id) {        TaskQuartz quartz;        try {               quartz = taskQuartzService.getById(id);            if(quartz == null){                return ResultBean.error("操作异常");            }            if(JobStatus.PAUSED.getStatus().equals(quartz.getJobStatus())){                //停止则恢复                JobKey key = new JobKey(quartz.getJobName(),quartz.getJobGroup());                scheduler.resumeJob(key);                quartz.setJobStatus(JobStatus.RUN.getStatus());            }else if(JobStatus.RUN.getStatus().equals(quartz.getJobStatus())){                JobKey key = new JobKey(quartz.getJobName(),quartz.getJobGroup());                scheduler.pauseJob(key);                quartz.setJobStatus(JobStatus.PAUSED.getStatus());            }else{                return ResultBean.error("程序还未启动！");            }            taskQuartzService.updateById(quartz);        } catch (SchedulerException e) {            e.printStackTrace();            return ResultBean.error();        }        return ResultBean.success(quartz.getJobStatus());    }    /**     * 启动任务     * @param quartz     * @throws Exception     */    public void addJob(TaskQuartz quartz) throws Exception {        Class cls = Class.forName(quartz.getJobClassName()) ;        cls.newInstance();        //构建job信息        JobDetail job = JobBuilder.newJob(cls).withIdentity(quartz.getJobName(),quartz.getJobGroup()).withDescription(quartz.getDescription()).build();        //添加JobDataMap数据        job.getJobDataMap().put("taskId", quartz.getId());        // 触发时间点        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(quartz.getCronExpression());        Trigger trigger = TriggerBuilder.newTrigger().withIdentity("trigger_"+quartz.getJobName(), quartz.getJobGroup()).withDescription(quartz.getDescription()).startNow().withSchedule(cronScheduleBuilder).build();        //交由Scheduler安排触发        scheduler.scheduleJob(job, trigger);    }}