package com.sweet.modular.weixin;import cn.hutool.core.date.DateUtil;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.sweet.core.exception.ServiceException;import com.sweet.core.jwt.JwtTokenUtil;import com.sweet.core.model.ResultBean;import com.sweet.core.model.system.LayuiPageInfo;import com.sweet.core.shiro.ShiroKit;import com.sweet.core.translationDict.TranslationDict;import com.sweet.core.util.JavaSmsApi;import com.sweet.core.util.MD5Utils;import com.sweet.core.util.RedisUtil;import com.sweet.core.util.StringUtil;import com.sweet.modular.arranged.entity.Arranged;import com.sweet.modular.arranged.service.ArrangedService;import com.sweet.modular.patient.entity.Patient;import com.sweet.modular.patient.service.PatientService;import com.sweet.modular.record.entity.Record;import com.sweet.modular.record.service.RecordService;import com.sweet.modular.rxdrug.entity.Rxdrug;import com.sweet.modular.rxdrug.service.RxdrugService;import com.sweet.modular.tTemporary.entity.TTemporary;import com.sweet.modular.tTemporary.service.TTemporaryService;import com.sweet.modular.taskdetail.entity.Taskdetail;import com.sweet.modular.taskdetail.service.TaskdetailService;import com.sweet.modular.template.entity.Template;import com.sweet.modular.template.service.TemplateService;import com.sweet.modular.weixin.mapper.WeiXinMapper;import com.sweet.modular.weixin.service.WeiXinService;import com.sweet.system.entity.Dict;import com.sweet.system.entity.User;import com.sweet.system.model.UploadResult;import com.sweet.system.service.DictService;import com.sweet.system.service.FileService;import com.sweet.system.service.UserService;import com.sweet.wxmp.util.WxMpUtil;import me.chanjar.weixin.common.error.WxErrorException;import me.chanjar.weixin.mp.api.WxMpService;import me.chanjar.weixin.mp.bean.result.WxMpOAuth2AccessToken;import me.chanjar.weixin.mp.bean.result.WxMpUser;import me.chanjar.weixin.mp.bean.template.WxMpTemplateData;import me.chanjar.weixin.mp.bean.template.WxMpTemplateMessage;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.authc.*;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.format.annotation.DateTimeFormat;import org.springframework.stereotype.Controller;import org.springframework.transaction.annotation.Transactional;import org.springframework.ui.Model;import org.springframework.util.ResourceUtils;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import java.io.File;import java.io.IOException;import java.nio.file.Path;import java.nio.file.Paths;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;@Controller@RequestMapping("/weixin")public class WeiXinController {    @Autowired    TTemporaryService tTemporaryService;    @Autowired    FileService fileService;    @Autowired    DictService dictService;    @Autowired    ArrangedService arrangedService;    @Autowired    HttpServletRequest request;    @Autowired    UserService userService;    @Autowired    RedisUtil redisUtil;    @Autowired    WeiXinService weiXinService;    @Autowired    WxMpService wxMpService;    @Autowired    PatientService patientService;    @Autowired    RecordService recordService;    @Autowired    RxdrugService rxdrugService;    @Autowired    TemplateService templateService;    @Autowired    TaskdetailService taskdetailService;    @Autowired    WeiXinMapper weiXinMapper;    @Value("${system.domain}")    public String domain;    @Value("${spring.profiles.active}")    public String mode;    @RequestMapping("")    public String weixin(String code, Model model)  {        if(StringUtil.isNotEmpty(code)){            try {                String openId = String.valueOf(redisUtil.get("code:"+code));                if(StringUtil.isEmpty(openId)){                    WxMpOAuth2AccessToken token = null;                    token = wxMpService.oauth2getAccessToken(code);                    openId = token.getOpenId();                    redisUtil.set("code:"+code,openId,3600);                }                model.addAttribute("openId",openId);            } catch (WxErrorException e) {                e.printStackTrace();            }        }        return "/modular/weixin/index";    }    /**     * 退出登录时返回给前台 微信授权URL     * @param code     * @return     */    @RequestMapping("/logout")    @ResponseBody    public ResultBean logOut(){        String url = domain+"/weixin";        url = WxMpUtil.buildWxUrl(url);        return ResultBean.success(url);    }    @RequestMapping("/login")    public String login(){        return "/modular/weixin/login";    }    @RequestMapping("/phoneLogin")    public String phoneLogin(){        return "/modular/weixin/phoneLogin";    }    @RequestMapping("/about")    public String about(){        return "/modular/weixin/about";    }    @RequestMapping("/personal")    public String personal(){        return "/modular/weixin/personal";    }    @RequestMapping("/updatePersonal")    public String updatepersonal(){        return "/modular/weixin/updatePersonal";    }    @RequestMapping("/doctorPersonal")    public String doctorPersonal(){        return "/modular/weixin/doctorPersonal";    }    @RequestMapping("/patientCase")    public String patientCase(){        return "/modular/weixin/patientCase";    }    @RequestMapping("/taskdetail")    public String taskdetail(){        return "/modular/weixin/taskdetail";    }    @RequestMapping("/followUp")    public String followUp(){        return "/modular/weixin/followUp";    }    @RequestMapping("/myPatients")    public String myPatients(){        return "/modular/weixin/myPatients";    }    @RequestMapping("/arranged")    public String arranged(){        return "/modular/weixin/arranged";    }    @RequestMapping("/consult")    public String consult(){        return "/modular/weixin/consult";    }    @RequestMapping("/consultPatient")    public String consultPatient(){        return "/modular/weixin/consultPatient";    }    @RequestMapping("/consultdoctor")    public String consultDoctor(){        return "/modular/weixin/consultDoctor";    }    @RequestMapping("/getByPatient")    @ResponseBody    @TranslationDict({    })    public ResultBean getByPatient(){        Patient patient = (Patient) request.getAttribute("patient");            return ResultBean.success(patient);    }    @RequestMapping("/getUserById")    @ResponseBody    public ResultBean getUserById(String Id){        User user =  userService.findUserById(Id);        return ResultBean.success(user);    }    /**     * 发送短信     * @param mobile     * @param code     * @return     */    @RequestMapping("/sendSmsCode")    @ResponseBody    public ResultBean sendSmsCode(String mobile) {        String smsCode = String.valueOf(redisUtil.get("smsCode:" + mobile));        if (StringUtil.isNotEmpty(smsCode)) {            throw new ServiceException("验证码已发送,请稍后重新获取！");        } else {            smsCode = JavaSmsApi.createCode();            weiXinService.sendSms(mobile, JavaSmsApi.tpl_id, smsCode, mode);        }        return ResultBean.success();    }    @RequestMapping("/follow")    public String follow(String detailId, Model model) {        if (StringUtil.isNotEmpty(detailId)) {            Taskdetail taskdetail = taskdetailService.getById(detailId);            model.addAttribute("content", taskdetail.getContent());            model.addAttribute("result", taskdetail.getResult());        }        return "/modular/weixin/follow";    }    @RequestMapping("/followSub")    @ResponseBody    public ResultBean followSub(String result,String detailId) throws WxErrorException {        Taskdetail taskdetail = new Taskdetail();        taskdetail.setId(detailId);        taskdetail.setResult(result);        taskdetailService.updateById(taskdetail);        Patient patient = (Patient) request.getAttribute("patient");        String doctorId = patient.getBlcjz();        if(StringUtil.isNotEmpty(doctorId)){            User user = userService.getById(doctorId);            String openId = user.getOpenId();            if(StringUtil.isNotEmpty(openId)){                List<WxMpTemplateData> data = new ArrayList<>();                data.add(new WxMpTemplateData("first","随访完成通知！"));                data.add(new WxMpTemplateData("keyword1","宁寿堂健康"));                data.add(new WxMpTemplateData("keyword2", user.getRealName()));                data.add(new WxMpTemplateData("keyword3",patient.getPatientName()));                data.add(new WxMpTemplateData("keyword4", "点击查看详情"));                data.add(new WxMpTemplateData("keyword5", DateUtil.formatDate(new Date())));                data.add(new WxMpTemplateData("keyword4", "祝您工作愉快！"));                String url = domain+"/weixin";                weiXinService.sendTemplateMessage(weiXinService.FOLOOW_UP_SUCCESS,openId,data,url);            }        }        return ResultBean.success(taskdetail);    }    @RequestMapping("/arrangedSub")    @ResponseBody        public ResultBean arrangedSub(String stime ,String number,String sit,String cont) throws WxErrorException, ParseException {        Patient patient = (Patient) request.getAttribute("patient");        if(patient==null){            throw new ServiceException("获取不到患者信息");        }        if(StringUtil.isEmpty(patient.getPatientName())){            throw new ServiceException("个人信息未完善，真实姓名不能为空");        }        String patienid = patient.getId();        String doctorId = patient.getBlcjz();        if(StringUtil.isNotEmpty(doctorId)){//医生的id            User user = userService.getById(doctorId);            String openId = user.getOpenId();            String userid = user.getUserId();            if(StringUtil.isNotEmpty(openId)){//医生有没有openID 没有openID无法发送模板信息                SimpleDateFormat slt = new SimpleDateFormat("yyyy-MM-dd HH:mm");                Date utilDate = slt.parse(stime);                if(weiXinService.arrangedwhere(utilDate,patienid)){//判断预约日期是否合理                    List<WxMpTemplateData> data = new ArrayList<>();                    data.add(new WxMpTemplateData("first","预约通知！"));                    data.add(new WxMpTemplateData("keyword1",patient.getPatientName()));                    data.add(new WxMpTemplateData("keyword2",stime));                    data.add(new WxMpTemplateData("keyword3",sit));                    data.add(new WxMpTemplateData("keyword4",cont));                    data.add(new WxMpTemplateData("remark","预约人数:"+number+"人"));                    String url = domain+"/weixin";                    weiXinService.sendTemplateMessage(weiXinService.ARRANGED,openId,data,url);                    Arranged arranged = new Arranged();                    arranged.setPatientId(patienid);                    arranged.setUserId(userid);                    if(StringUtil.isNotEmpty(user.getRealName())){//医生没有真实姓名时添加账号昵称                        arranged.setUserName(user.getRealName());                    }else{                        arranged.setUserName(user.getUserName());                    }                    arranged.setPatientName(patient.getPatientName());                    arranged.setArrangedSite(sit);                    arranged.setArrangedCont(cont);                    arranged.setArrangedNumber(number);                    arranged.setArrangedTime(utilDate);                    arranged.setCreateTime(new Date());                    arrangedService.saveOrUpdate(arranged);                }            }else{                throw new ServiceException("无法发送消息！");            }        }else{            throw new ServiceException("您还没有医生！");        }        return  ResultBean.success("");    }    /**     * 列表数据     */    @RequestMapping("/getRecordList")    @ResponseBody    @TranslationDict({    })    public LayuiPageInfo getRecordList(Record Record){        Patient patient = (Patient) request.getAttribute("patient");        Record.setPatientId(patient.getId());        LayuiPageInfo pageInfo = recordService.findPageBySpec(Record);        List<Record> list = pageInfo.getData();        list.stream().forEach(record -> {            String recordId = record.getId();            LayuiPageInfo layuiPageInfo = rxdrugService.findPageBySpec(new Rxdrug().setRecordId(recordId));            record.setDrugList(layuiPageInfo.getData());        });        return pageInfo;    }    @RequestMapping("/getRecord")    @ResponseBody    @TranslationDict({    })    public LayuiPageInfo getRecord(String id){        Record r = new Record();        r.setPatientId(id);        LayuiPageInfo pageInfo = recordService.findPageBySpec(r);        List<Record> list = pageInfo.getData();        list.stream().forEach(record -> {            String recordId = record.getId();            LayuiPageInfo layuiPageInfo = rxdrugService.findPageBySpec(new Rxdrug().setRecordId(recordId));            record.setDrugList(layuiPageInfo.getData());        });        return pageInfo;    }    /**     * 列表数据     */    @RequestMapping("/getFollowList")    @ResponseBody    @TranslationDict({    })    public ResultBean getFollowList(Taskdetail taskdetail){        Patient patient = (Patient) request.getAttribute("patient");        taskdetail.setPatientId(patient.getId());        LayuiPageInfo pageInfo = taskdetailService.findPageBySpec(taskdetail);        List<Record> list = pageInfo.getData();        return ResultBean.success(list);    }    @RequestMapping("/getPatientList")    @ResponseBody    @TranslationDict({    })    public ResultBean getPatientList(){       String userId = (String) request.getAttribute("userId");        List<Patient> list = patientService.getPatientByDoctorId(userId);        return ResultBean.success(list);    }    @RequestMapping("/personalInfo")    @ResponseBody    public ResultBean personalInfo() throws WxErrorException {        Map resultMap = new HashMap();        String userId = (String) request.getAttribute("userId");        Patient patient = (Patient) request.getAttribute("patient");        User user = userService.getById(userId);        WxMpUser wxMpUser = wxMpService.getUserService().userInfo(user.getOpenId());        resultMap.put("patient",patient);        resultMap.put("wxMpUser",wxMpUser);        return ResultBean.success(resultMap);    }    @RequestMapping("/doctorInfo")    @ResponseBody    public ResultBean doctorInfo() throws WxErrorException {        Map resultMap = new HashMap();        String userId = (String) request.getAttribute("userId");        User user = userService.getById(userId);        WxMpUser wxMpUser = wxMpService.getUserService().userInfo(user.getOpenId());        resultMap.put("user",user);        resultMap.put("wxMpUser",wxMpUser);        return ResultBean.success(resultMap);    }    @RequestMapping("/getPatientTaskdetail")    @ResponseBody    public ResultBean getPatientTaskdetail(String patientID){       List<Taskdetail> list =  taskdetailService.getPatientTaskdetailList(patientID);       return ResultBean.success(list);    }    @RequestMapping("/patientRecord")    public String patientRecord(){        return "/modular/weixin/patientRecord";    }    @RequestMapping("/getPatientrRecord")    @ResponseBody    public ResultBean getPatientrRecord(String patientId){        Record record =  weiXinService.getPatientrRecord(patientId);        return ResultBean.success(record);    }    /**     * 验证码是否正确     * @param mobile     * @param code     * @return     */    @RequestMapping("/phoneLoginSub")    @ResponseBody    @Transactional    public ResultBean phoneLoginSub(String mobile,String code,String openId) throws WxErrorException {        Map map = new HashMap();        boolean isDoctor = false;        String smsCode = String.valueOf(redisUtil.get("smsCode:"+mobile));        if(code.equals(smsCode)){            User user = new User();            Patient patient = new Patient();            patient =  patientService.getPatientphone(mobile);            if(patient==null){                user = userService.findByUserName(mobile);                if (user != null) {                    isDoctor = true;                    map.put("user",user);                    map.put("token", JwtTokenUtil.generateToken(user.getUserId()));                } else {                    user = new User();                    user.setUserName(mobile);                    user.setAccountStatus(0);//设置用户状态冻结                    user.setUserType(0);//区分用户不被查询                    userService.addUser(user);                    patient = new Patient();                    System.out.println(openId);                    WxMpUser wxMpUser = wxMpService.getUserService().userInfo(openId);                    patient.setPatientNickname(wxMpUser.getNickname());                    patient.setPatientSex(String.valueOf(wxMpUser.getSex()));                    patient.setUserid(user.getUserId());                    patient.setPhoneNumber(mobile);                    patient.setPatientSource("1");//微信注册                    patientService.saveOrUpdate(patient);                    patient = patientService.getPatientphone(mobile);                    map.put("user",patient);                    map.put("token", JwtTokenUtil.generateToken(patient.getUserid()));                }            }else{                map.put("user",patient);                map.put("token", JwtTokenUtil.generateToken(patient.getUserid()));                user.setUserId(patient.getUserid());            }            map.put("isDoctor",isDoctor);            if (StringUtil.isNotEmpty(openId)) {                weiXinMapper.resetOpenId(openId);                user.setOpenId(openId);                userService.updateById(user);            }            return ResultBean.success(map);        }else{            throw new ServiceException("验证码有误！");        }    }    @RequestMapping("/loginSubmit")    @ResponseBody    public ResultBean loginSubmit(User user,String openId){        String username = user.getUserName().toLowerCase();        String password = MD5Utils.encrypt(username, user.getPassword());        UsernamePasswordToken token = new UsernamePasswordToken(username, password);        // 获取Subject对象        Subject subject = ShiroKit.getSubject();        try {            subject.login(token);            user = ShiroKit.getUser();            boolean isDoctor = false;            Patient patient = patientService.getPatientByUserId(user.getUserId());            Map map = new HashMap<>();            if(patient==null){                isDoctor = true;                map.put("user",user);            }else{                map.put("user",patient);            }            map.put("token", JwtTokenUtil.generateToken(user.getUserId()));            map.put("isDoctor",isDoctor);            if(StringUtil.isNotEmpty(openId)){                weiXinMapper.resetOpenId(openId);                user.setOpenId(openId);                userService.updateById(user);            }            return ResultBean.success(map);        } catch (UnknownAccountException e) {            throw new ServiceException(e.getMessage());        } catch (IncorrectCredentialsException e) {            throw new ServiceException(e.getMessage());        } catch (AuthenticationException e) {            throw new ServiceException("认证失败");        }    }    @RequestMapping("/editPatient")    @ResponseBody    public ResultBean editPatient(Patient patient){        if (StringUtils.isEmpty(patient.getId())){            throw  new ServiceException("没有您的患者信息");        }        patientService.saveOrUpdate(patient);        return ResultBean.success(patient);    }    @RequestMapping("/getDictList")    @ResponseBody    public ResultBean getDictList(String drugTypeId){            List<Dict> list = dictService.findByTypeId(drugTypeId);        return ResultBean.success(list);    }    private String filePath="";    @RequestMapping("/upload")    @ResponseBody    public JSONObject upload(@RequestParam("file") MultipartFile file, HttpServletRequest request) {        JSONObject result = new JSONObject();        try {            File destFile = new File(ResourceUtils.getURL("classpath:").getPath());            if (!destFile.exists()) {                destFile = new File("");            }            //输出目标文件的绝对路径            //System.out.println("file path:" + destFile.getAbsolutePath());            //拼接子路径            File upload = new File(destFile.getAbsolutePath(), "static/common/images/drug/");            //若目标文件夹不存在，则创建            if (!upload.exists()) {                upload.mkdirs();            }            //System.out.println("完整的上传路径：" + upload.getAbsolutePath() + "/" + file);            //拼接上传路径            //Path path = Paths.get(UPLOAD_FOLDER + srcFile.getOriginalFilename());            //通过项目路径，拼接上传路径            // 姓名            String name = request.getParameter("name");            System.out.println("姓名：" + this.getClass().getResource("/"));            // 文件名            String fileName = file.getOriginalFilename();            System.out.println("文件名： " + fileName);            // 文件后缀            String suffixName = fileName.substring(fileName.lastIndexOf("."));            System.out.println("文件后缀名： " + suffixName);            // 重新生成唯一文件名，用于存储数据库            String newFileName = UUID.randomUUID().toString() + suffixName;            System.out.println("新的文件名： " + newFileName);            //创建文件            File dest = new File(upload.getAbsolutePath()+'/' + newFileName);            Path path = Paths.get(upload.getAbsolutePath());            System.out.println("上传路径：" + path);            Map map = new HashMap();            map.put("filePath", dest.getAbsolutePath());            map.put("name", name);            file.transferTo(dest);            result.put("success", true);            result.put("data", map);            return result;        } catch (IOException e) {            e.printStackTrace();        }        return (JSONObject) result.put("success", false);    }    /**     * 添加/编辑     */    @RequestMapping("/editTTemporary")    @ResponseBody    public ResultBean editTTemporary(TTemporary tTemporary){        tTemporary.setCreateTime(new Date());        tTemporaryService.saveOrUpdate(tTemporary);        return ResultBean.success(tTemporary);    }}