package com.sweet.modular.clinicPharmacy.controller;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.sweet.core.model.ResultSuccess;import com.sweet.core.translationDict.DictParam;import com.sweet.core.translationDict.TranslationDict;import com.sweet.modular.clinicPharmacy.job.TioJob;import com.sweet.modular.record.entity.Record;import com.sweet.modular.record.service.RecordService;import com.sweet.modular.rxdrug.entity.Rxdrug;import com.sweet.modular.rxdrug.service.RxdrugService;import com.sweet.modular.taskQuartz.job.HelloJob;import com.sweet.modular.taskQuartz.service.TaskQuartzService;import org.quartz.*;import org.quartz.impl.StdSchedulerFactory;import org.springframework.web.bind.annotation.RequestMapping;import com.sweet.core.model.ResultBean;import com.sweet.core.model.system.LayuiPageInfo;import com.sweet.modular.clinicPharmacy.entity.ClinicPharmacy;import com.sweet.modular.clinicPharmacy.service.ClinicPharmacyService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import com.sweet.core.util.StringUtil;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.stereotype.Controller;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;/** * <p> * 药剂配制记录 前端控制器 * </p> * * @author admin * @since 2020-05-07 */@Controller@RequestMapping("/admin/clinicPharmacy")public class ClinicPharmacyController {    @Autowired    RxdrugService rxdrugService;    @Autowired    RecordService recordService;    @Autowired    private Scheduler scheduler;    @Autowired    TaskQuartzService taskQuartzService;    @Autowired    ClinicPharmacyService clinicPharmacyService;    /**     * 列表页     */    @RequestMapping("/clinicPharmacy_list")    public String list(){        return "/modular/clinicPharmacy/clinicPharmacy_list";    }    /**     * 编辑页     */    @RequestMapping("/clinicPharmacy_edit")    public String edit(){        return "/modular/clinicPharmacy/clinicPharmacy_edit";    }    /**     * 添加/编辑     */    @RequestMapping("/editClinicPharmacy")    @ResponseBody    public ResultBean editClinicPharmacy(ClinicPharmacy clinicPharmacy){        clinicPharmacyService.saveOrUpdate(clinicPharmacy);        return ResultBean.success(clinicPharmacy);    }    /**     * 删除     */    @RequestMapping("/delClinicPharmacy")    @ResponseBody    public ResultBean delClinicPharmacy(ClinicPharmacy clinicPharmacy){        clinicPharmacyService.removeById(clinicPharmacy);        return ResultBean.success(clinicPharmacy);    }    /**     * 添加修改菜单     * @param menu     * @return     */    @RequestMapping("/getClinicPharmacyDetail")    @ResponseBody    public ResultBean getClinicPharmacyDetail(String id){        ClinicPharmacy clinicPharmacy = clinicPharmacyService.getById(id);        return ResultBean.success(clinicPharmacy);    }    /**     * 列表数据     */    @RequestMapping("/getClinicPharmacyList")    @ResponseBody    @TranslationDict({    })    public LayuiPageInfo getClinicPharmacyList(ClinicPharmacy clinicPharmacy){        LayuiPageInfo pageInfo = clinicPharmacyService.findPageBySpec(clinicPharmacy);        return pageInfo;    }    /**     * list     */    @RequestMapping("/getPharmacyList")    @ResponseBody    public ResultBean getPharmacyList(String itmes){        QueryWrapper<ClinicPharmacy> c = new QueryWrapper<>();        Date time = new Date();        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");        c.like("create_time",formatter.format(time)).orderByDesc("create_time");        List<ClinicPharmacy> Info = clinicPharmacyService.list(c);        return ResultBean.success(Info);    }    /**     * id     */    @RequestMapping("/getPharmacyById")    @ResponseBody    public ResultBean getPharmacyById(String id){        QueryWrapper<ClinicPharmacy> c = new QueryWrapper<>();        Date time = new Date();        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");        c.eq("record_id",id);        ClinicPharmacy Info = clinicPharmacyService.query().eq("record_id",id).one();        return ResultBean.success(Info);    }    @RequestMapping("/tioJob")    public void tioJob() throws Exception {        //创建jobDetail绑定HelloJob        JobDetail jobDetail = JobBuilder.newJob(TioJob.class)                .withIdentity("myJob","myGroup").build();        //创建触发器trigger每个2秒执行一次，一直执行        Trigger trigger = TriggerBuilder.newTrigger().withIdentity("mtTrigger", "myGroup").startNow()                .withSchedule(SimpleScheduleBuilder.simpleSchedule()                        .withIntervalInSeconds(60).repeatForever()).build();        //创建调度者工厂        //SchedulerFactory schedulerFactory = new StdSchedulerFactory();        //创建调度者        //Scheduler scheduler = schedulerFactory.getScheduler();        //启动调度器        //scheduler.start();        //设置调度任务        scheduler.scheduleJob(jobDetail, trigger);    }    @RequestMapping("/pauseTio")    public void pauseTio() throws Exception {        //创建jobDetail绑定HelloJob        TriggerKey triggerKey = TriggerKey.triggerKey("mtTrigger", "myGroup");        scheduler.pauseTrigger(triggerKey);    }    @RequestMapping("/resumeTio")    public void resumeTio() throws Exception{        TriggerKey triggerKey = TriggerKey.triggerKey("mtTrigger", "myGroup");        scheduler.resumeTrigger(triggerKey);        JobKey jobKey = new JobKey("myJob","myGroup");        scheduler.deleteJob(jobKey);    }    @RequestMapping("/getRecordList")    @ResponseBody    public ResultBean getRecordList(String id){        Record record = recordService.query().eq("id",id).one();        List<Rxdrug> rxdrugList = rxdrugService.query().eq("RECORD_ID",id).list();        record.setDrugList(rxdrugList);        return ResultBean.success(record);    }}